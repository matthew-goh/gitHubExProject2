# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index()

GET     /userlisting     controllers.ApplicationController.listAllUsers()
GET     /github/users/:username     controllers.ApplicationController.getUserDetails(username: String)
POST     /searchuser     controllers.ApplicationController.searchUser()
POST     /github/users/add     controllers.ApplicationController.addUser()
GET     /delete/:username     controllers.ApplicationController.deleteUser(username: String)

# https://api.github.com/users/matthew-goh/repos
GET     /github/users/:username/repos     controllers.ApplicationController.getUserRepos(username: String)
# https://api.github.com/repos/matthew-goh/scala101/contents/src
GET     /github/users/:username/repos/:repoName     controllers.ApplicationController.getRepoItems(username: String, repoName: String)
GET     /github/users/:username/repos/:repoName/*path     controllers.ApplicationController.getFromPath(username: String, repoName: String, path: String)

PUT     /github/create/:username/repos/:repoName/*path     controllers.ApplicationController.createFile(username: String, repoName: String, path: String)
PUT     /github/update/:username/repos/:repoName/*path     controllers.ApplicationController.updateFile(username: String, repoName: String, path: String)
DELETE     /github/delete/:username/repos/:repoName/*path     controllers.ApplicationController.deleteFile(username: String, repoName: String, path: String)

GET     /api     controllers.ApplicationController.index()
POST     /api/create     controllers.ApplicationController.create()
GET     /api/:username     controllers.ApplicationController.read(username: String)
PUT     /api/:username     controllers.ApplicationController.update(username: String)
PUT     /api/:username/:field/:value     controllers.ApplicationController.updateWithValue(username: String, field: String, value: String)
DELETE     /api/:username     controllers.ApplicationController.delete(username: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)


# index: curl "localhost:9000/api" -i
# create:
# curl -H "Content-Type: application/json" -d '{ "username" : "test1", "location" : "London", "accountCreatedTime" : "2024-10-28T15:22:40Z", "numFollowers" : 1, "numFollowing" : 0 }' "localhost:9000/api/create" -i
# curl -H "Content-Type: application/json" -d '{ "username" : "test2", "location" : "", "accountCreatedTime" : "2024-10-28T15:22:40Z", "numFollowers" : 1, "numFollowing" : 32 }' "localhost:9000/api/create" -i

# read: curl "localhost:9000/api/test1" -i
# update: curl -X PUT -H "Content-Type: application/json" -d '{ "username" : "test1", "location" : "Singapore", "accountCreatedTime" : "2024-10-28T15:22:40Z", "numFollowers" : 1, "numFollowing" : 2 }' "localhost:9000/api/test1" -i
# updateWithField:
# curl -X PUT "localhost:9000/api/test1/location/London" -i
# curl -X PUT "localhost:9000/api/test1/numFollowers/2" -i

# delete: curl -X DELETE "localhost:9000/api/test2"

# createFile
# curl -X PUT -H "Content-Type: application/json" -d '{"commitMessage": "Test commit", "fileContent": "Creating test file"}' "localhost:9000/github/create/matthew-goh/repos/test-repo/testfile.txt" -i
# curl -X PUT -H "Content-Type: application/json" -d '{"commitMessage": "Another test commit", "fileContent": "Creating another test file"}' "localhost:9000/github/create/matthew-goh/repos/test-repo/testfolder/testfile2.txt" -i
# bad path: curl -X PUT -H "Content-Type: application/json" -d '{"commitMessage": "Test commit", "fileContent": "Creating another test file"}' "localhost:9000/github/create/matthew-goh/repos/test-repo/invalid//test.txt" -i
# curl -X PUT -H "Content-Type: application/json" -d '{"commitMessage": "Test commit", "fileContent": "Creating another test file"}' "localhost:9000/github/create/abc/repos/test-repo/testfile.txt" -i
# updateFile (check sha first) - creates the file if doesn't exist
# curl -X PUT -H "Content-Type: application/json" -d '{"commitMessage": "Test update", "newFileContent": "Updating file", "fileSHA": "3eed7ec08d20f5749d88b819d20e0be5775a7e3b"}' "localhost:9000/github/update/matthew-goh/repos/test-repo/testfile.txt" -i
# curl -X PUT -H "Content-Type: application/json" -d '{"commitMessage": "Test update", "newFileContent": "Updating file", "fileSHA": "3eed7ec08d20f5749d88b819d20e0be5775a7e3b"}' "localhost:9000/github/update/matthew-goh/repos/test-repo/invalid//test.txt" -i
# deleteFile (check sha first)
# curl -X DELETE -H "Content-Type: application/json" -d '{"commitMessage": "Test delete", "fileSHA": "4753fddcf141a3798b6aed0e81f56c7f14535ed7"}' "localhost:9000/github/delete/matthew-goh/repos/test-repo/testfile" -i